你是一個擅長標準 Verilog 的開發者，目前我正在開發一款利用 Verilog 實作，運行在單一 FPGA 上的雙人對戰 battleship 桌遊，請你為我寫好complete, concise, executable的程式碼。


## 我已經提供你所有可以利用到的模組，包含:
1. vga_controller.v : 用於控制 battleship 運行過程中，螢幕上的顯示。
2. Ps2Interface.v, KeyboardDecoder.v, KeyboardCtrl.v, KeyboardConstraints.xdc : 用來控制鍵盤操作，提供玩家與遊戲交互的介面。
3. clock_divier.v : 用於產生符合 VGA 標準的 clk (25MHz)

## 運行環境:
螢幕: 16-9
單一 FPGA : Artix-7 xc7a35tcpg236-1
單一桌上式鍵盤
VGA: 使用 HDMI 線與螢幕連接 (接受 25MHz clk)


## State graph:
遊戲的運行可以分成 4 個不同的 state，分別是
**INIT**: 準備狀態
**SETUP**: 布陣狀態
**GAME**: 遊戲狀態
**FINISH**: 結算狀態

### 狀態之間的轉變，按照以下邏輯
INIT -> SETUP : 如果按下 ENTER 鍵，就轉換到 SETUP state
SETUP -> GAME : 如果兩位玩家都布陣好船隻，按下 ENTER 鍵會進入到 GAME state，主遊戲開始
GAME -> FINISH : 如果有任何一方的船隻全部被炸掉，則進入 FINISH state，並宣布獲勝玩家
FINISH -> INIT : 如果按下 Enter，會回到 INIT state

#### 在任何時候，如果按下 reset 鍵，會直接返回 INIT state，並且初始化當前變數紀錄。
SETUP -> INIT
GAME -> INIT
FINISH -> INIT


## State 詳細內容介紹:

**INIT**:
我會準備一個圖片，用 blk_mem_0 儲存:
請你直接用 VGA 顯示這張圖片就好
當使用者按下 Enter 鍵，會進入到 SETUP state

**SETUP**:
SETUP state 時，玩家可以安排自己的船隻布置
當 Gamer01 布置船隻時，最底層背景使用 blk_mem_3；當 Gamer02 布置船隻時，最底層背景使用 blk_mem_4
畫面左方出現一個 10x10 的遊戲盤(請你用數學方法實現)。
畫面右方呈現5種船隻的icon，分別是:
"""
1- 5 格的船隻 (航空母艦)
2- 4 格的船隻 (戰鬥艦)
3- 3 格的船隻 (巡洋艦)
4- 3 格的船隻 (潛水艇)
5- 2 格的船隻 (驅逐艦)
"""
以下都會使用他們的別名進行代稱。
你可以直接在畫面中使用數學方法呈現依照比例長度的長方形圖塊 (船隻必須要是淺綠色的、但是潛水艇是深藍色的)，中間需要有線隔開表示該船佔據 x 格。


具體規則如下:
* Player 1 先布置船隻 (背景使用 blk_mem_3)
1. 依序從航空母艦船隻開始擺放，到驅逐艦：
   1-1 如果該船已經被放置，轉成灰色
   1-2 你需要讓用戶可以看懂當前選到哪一艘船，例如將船隻做反白

2. 選好船隻之後，該船隻會先被挪到最左上角位置，初始都是擺橫的，例如我要放航空母艦，當我選取到他，他會佔據第一行從最左上開始，往右數來共 5 位置
   2-2 船隻的軸心直接定義為原始最左上位置的該格元素
   2-1 若該船隻有部位被判定為非法位置，例如:
       2-1-1 與其他已經布陣好的船重疊
       2-1-2 船隻有部位超出遊戲盤
       則該船隻整體變成紅色，告訴使用者當前位置非法
   2-2 移動
       2-2-1 用戶可以透過 上下左右 按鍵，操控當前船隻部陣位置
       2-2-2 所有的操作都是由軸心移動，必須要確保軸心位置，不可以超出遊戲盤
   2-3 旋轉
       2-3-1 按下 shift 的時候，該船隻會以軸心進行順時針旋轉
   2-4 非法檢查
       2-4-1 隨時都要檢查當前操作的船隻是否非法 (與其他船隻重疊、超出範圍)
       2-4-2 可以維持一個 2D 陣列，如果該位置有放置船隻，則設定為 1，否則設定為 0。我們透過檢查當前船隻預期放置位置是否有 1，就可以做到非法(重疊)
       2-4-3 如果當前船隻重疊所在位置超過矩陣長度/範圍，則判定為非法(出界)
   2-5 部屬
       2-5-1 如果當前船隻所在位置合法，按下 Enter 即可完成部署，並自動選到下一個順位的船隻
       2-5-2 下一個船隻一樣從最左上開始，遵守相同規則


* 待 Player 1 所有船隻布置完，輪到 Player 2 布置船隻 (blk_mem_4)
規則與 Player 1 布置方法相同，請確保兩位玩家的部屬相關資訊是獨立的，避免發生 bug 或非預期狀況。

* 當 Player 2 也部屬好，按下 Enter 即可進入下一個 state。
**如果有任一玩家、任一船隻還沒被部屬好，按下 Enter 時需要進行警告**
警告方式: 在螢幕周圍出現 ~5px 寬度的紅色色塊 (#FF5151)，持續 3 秒


**GAME**:
GAME state 時，兩位玩家輪流轟炸對方的棋盤
當 Gamer01 進行轟炸時，最底層背景使用 blk_mem_3；當 Gamer02 進行轟炸時，最底層背景使用 blk_mem_4
畫面正中出現一個 10x10 的遊戲盤(請你用數學方法實現)。

* 在 Gamer01 回合時:
1. 從最左上方的格子開始，上下左右選擇當前需要轟炸的格子，按下 space 確定轟炸
    1-1. 選格子的時候，不允許超出遊戲盤範圍，否則移動無效
2. 如果該格子有被 Gamer02 部屬船隻，則將該格子填滿橘色，表示成功轟炸
3. 如果該格子沒有被 Gamer02 部屬船隻，則將該格子填滿灰色，表示炸空
4. (額外) 如果當前玩家的"潛水艇"還存活，則可以按下 Caps 按鍵開啟連續轟炸模式，否則無效果。連續轟炸模式一位玩家只能開啟一次。
    4-1. 連續轟炸模式
        4-1-1. 若當前轟炸有炸到敵方船隻，則允許進行下一次的轟炸，
        4-1-2. 連續轟炸直到"炸空"，即，當前轟炸沒有命中目標
        4-1-3. 每一輪遊戲，每一位玩家只允許開啟一次連續轟炸模式
    4-2. 無法使用連續轟炸模式的情況
        4-2-1. 潛水艇已經被對方炸毀
        4-2-2. 當前遊戲已經使用過連續轟炸模式
        4-2-3. 若此時按下 Caps 按鍵，則進行警告: "在螢幕周圍出現 ~5px 寬度的紅色色塊 (#FF5151)，持續 3 秒"
5. 輪到 Gamer02 回合的條件:
   5-1. (非連續轟炸模式) Gamer01 炸完，輪到 Gamer02
   5-2. (連續轟炸模式) 若 Gamer01 炸空，則輪到 Gamer02

* 在 Gamer02 的回合時:
規則如同 Gamer01 的回合。

在 GAME state 中，兩位玩家會輪流進行轟炸，除非被連續轟炸模式進行插隊。
若有任何一位玩家的船隻都被炸沉，則進入到 FINISH state，宣告其中一位玩家的勝利。


**FINISH**:
如果 Gamer 01 獲勝:
在 FINISH state 中，背景圖片使用 blk_mem_1 作為底，全屏。

如果 Gamer 02 獲勝:
在 FINISH state 中，背景圖片使用 blk_mem_2 作為底，全屏。

當用戶按下 Enter，返回到 INIT state，並且清空過去紀錄。



# 補充:
1. 請給我完整的程式碼，避免截斷。如果發生截斷，請提供我"可重疊"的程式碼，可重疊的意思是，新程式碼的開頭必須要覆蓋到前一次生成的內容。
2. 我使用的是標準 verilog 語法，請注意避免
* declaration in unnamed block
* for loop 內宣告 int (你需要提前宣告 integer)
* for loop 內不可以使用 i++， verilog 並不支援這個語法。你需要使用 i = i + 1
* verilog 不支援 XXX ? AA:BB; 語法
3. 所有 function 都必須要有輸入，如果該 function 並非 void function，則需要有輸出
4. 所有的 blk_mem 模組都已經定義好，你可以直接使用。使用方法請參考以下範例，這是我在其他專案做的:
```
    reg [16:0] pixel_addr;
    wire [11:0] pixel_data [0:7];

    blk_mem_gen_0 img0(.clka(clk), .addra(pixel_addr), .douta(pixel_data[0]), .wea(1'b0), .dina(12'b0));
    blk_mem_gen_1 img1(.clka(clk), .addra(pixel_addr), .douta(pixel_data[1]), .wea(1'b0), .dina(12'b0));
    blk_mem_gen_2 img2(.clka(clk), .addra(pixel_addr), .douta(pixel_data[2]), .wea(1'b0), .dina(12'b0));
    blk_mem_gen_3 img3(.clka(clk), .addra(pixel_addr), .douta(pixel_data[3]), .wea(1'b0), .dina(12'b0));
    blk_mem_gen_4 img4(.clka(clk), .addra(pixel_addr), .douta(pixel_data[4]), .wea(1'b0), .dina(12'b0));
    blk_mem_gen_5 img5(.clka(clk), .addra(pixel_addr), .douta(pixel_data[5]), .wea(1'b0), .dina(12'b0));
    blk_mem_gen_6 img6(.clka(clk), .addra(pixel_addr), .douta(pixel_data[6]), .wea(1'b0), .dina(12'b0));
    blk_mem_gen_7 img7(.clka(clk), .addra(pixel_addr), .douta(pixel_data[7]), .wea(1'b0), .dina(12'b0));

    // Pixel address calculation
    reg [9:0] local_x, local_y;
    always @(*) begin
        if (valid) begin
            current_block = (v_cnt / 120) * 4 + (h_cnt / 160);
            
            if (state == GAME && !hint && !card_state[current_block]) begin
                pixel_addr = 0;
            end else begin
                local_x = (h_cnt % 160) / 2;
                local_y = (v_cnt % 120) / 2;
                
                if (mirror_state[current_block]) begin
                    pixel_addr = (BLOCK_HEIGHT - 1 - local_y) * BLOCK_WIDTH + local_x;
                end else begin
                    pixel_addr = local_y * BLOCK_WIDTH + local_x;
                end
            end
        end else begin
            pixel_addr = 0;
            current_block = 0;
        end
    end
```
